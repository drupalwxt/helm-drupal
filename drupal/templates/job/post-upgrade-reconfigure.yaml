{{- if .Values.drupal.reconfigure }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "drupal.fullname" . }}-reconfigure
  labels:
    app.kubernetes.io/name: {{ include "drupal.name" . }}
    helm.sh/chart: {{ include "drupal.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "drupal.name" . }}
        helm.sh/chart: {{ include "drupal.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      restartPolicy: OnFailure
{{- if or (.Values.drupal.initContainers) (or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled)) }}
      initContainers:
{{- if .Values.sharedDisk.enabled }}
        - name: init-chown
          image: 'alpine:3.10'
          command:
            - chown
            - '-R'
            - '82:82'
            - /mnt/azure
          volumeMounts:
            - name: files-public
              mountPath: /mnt/azure
{{- end }}
{{- if or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled) }}
        - name: init-media-icons-folder
          image: 'alpine:3.10'
          command:
            - mkdir
            - '-p'
            - /files/media-icons/generic
          volumeMounts:
            - name: files-public
              mountPath: /files
{{- end }}
{{- if .Values.drupal.initContainers }}
{{ toYaml .Values.drupal.initContainers | indent 8 }}
{{- end }}
{{- end }}
      containers:
      - name: drush
        image: "{{ .Values.drupal.image }}:{{ default .Chart.AppVersion .Values.drupal.tag }}"
        imagePullPolicy: {{ default "" .Values.drupal.imagePullPolicy | quote }}
        command:
          - '/bin/sh'
          - '-c'
          - |
              # Errors should fail the job
              set -e

              # Wait for DB to be available
              until drush sql:query 'SHOW TABLES;'; do echo Waiting for DB; sleep 3; done
              echo DB available

              # Check Drush status
              drush status || true

              # Run database updates
              {{- if .Values.drupal.cacheRebuildBeforeDatabaseMigration }}
              drush -y cache:rebuild
              {{- end }}
              drush -y updatedb

              # Lightning updates
              drush -y cache:rebuild
              drush -y update:lightning

              # WxT updates
              drush -y cache:rebuild
              drush -y update:wxt

              # Configure s3fs
              {{- if not (eq .Values.files.provider "none") }}
              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings bucket '{{ .Values.minio.defaultBucket.name }}'
              drush -y config:set s3fs.settings region 'us-east-1'
              {{- else if eq .Values.files.provider "s3" }}
              drush -y config:set s3fs.settings bucket '{{ .Values.s3.bucket }}'
              drush -y config:set s3fs.settings region '{{ .Values.s3.region }}'
              {{ end }}

              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_https 0
              {{- else }}
              drush -y config:set s3fs.settings use_https 1
              {{ end }}

              drush -y config:set s3fs.settings no_rewrite_cssjs 0

              {{- if .Values.files.cname.enabled }}
              drush -y config:set s3fs.settings use_cname 1
              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings domain {{ print .Values.files.cname.hostname "/" .Values.minio.defaultBucket.name | quote }}
              {{- else }}
              drush -y config:set s3fs.settings domain {{ print .Values.files.cname.hostname | quote }}
              {{- end }}
              {{- else if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_cname 1
              drush -y config:set s3fs.settings domain '/{{ .Values.minio.defaultBucket.name }}'
              {{- else }}
              drush -y config:set s3fs.settings use_cname 0
              {{- end }}

              {{- if eq .Values.files.provider "minio" }}
              drush -y config:set s3fs.settings use_customhost 1
              drush -y config:set s3fs.settings hostname '{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}'
              drush -y config:set s3fs.settings use_path_style_endpoint 1
              {{- else if and (eq .Values.files.provider "s3") .Values.s3.customHost.enabled }}
              drush -y config:set s3fs.settings use_customhost 1
              drush -y config:set s3fs.settings hostname '{{ .Values.s3.customHost.hostname }}'
              {{- if .Values.s3.customHost.pathBased }}
              drush -y config:set s3fs.settings use_path_style_endpoint 1
              {{- else }}
              drush -y config:set s3fs.settings use_path_style_endpoint 0
              {{- end }}
              {{- else }}
              drush -y config:set s3fs.settings use_customhost 0
              drush -y config:set s3fs.settings use_path_style_endpoint 0
              {{- end }}

              drush -y config:set s3fs.settings use_s3_for_public 1
              drush -y config:set s3fs.settings use_s3_for_private 1

              drush -y config:set s3fs.settings public_folder '{{ .Values.files.folders.public }}'
              drush -y config:set s3fs.settings private_folder '{{ .Values.files.folders.private }}'
              {{- end }}

              # Change WxT theme
              {{- if .Values.drupal.wxtTheme }}
              drush -y config:set wxt_library.settings wxt.theme '{{ .Values.drupal.wxtTheme }}'
              {{- end }}

              # Rebuild caches
              drush -y cache:rebuild

              {{- if .Values.drupal.migrate }}
              # Migrate content
              {{- if not (eq .Values.files.provider "none") }}
              drush -y config:set migrate_plus.migration.wxt_file process.uri uri
              {{- end }}
              drush -y migrate:import wxt_file
              {{- if not (eq .Values.files.provider "none") }}
              drush -y s3fs-refresh-cache
              {{- end }}
              drush -y migrate:import --group wxt --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Menu'
              {{- end }}

              # Extra Upgrade scripts
              {{- if .Values.drupal.extraUpgradeScripts }}
              {{ .Values.drupal.extraUpgradeScripts | nindent 14}}
              {{- end }}
        env:
{{- if .Values.external.enabled }}
        - name: EXTERNAL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "drupal.fullname" . }}
              key: databasePassword
{{- else if .Values.mysql.enabled }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              # This is not ideal, but calling {{ include "mysql.secretName" . }}
              # was returning the wrong result.
              name: "{{ .Release.Name }}-mysql"
              key: mysql-password
{{- else if .Values.postgresql.enabled }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql"
              key: postgresql-password
{{- end }}
{{- if .Values.redis.enabled }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-redis"
              key: redis-password
{{- end }}
        - name: DRUPAL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "drupal.fullname" . }}"
              key: password
{{- if eq .Values.files.provider "minio" }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-minio"
              key: accesskey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-minio"
              key: secretkey
{{- else if eq .Values.files.provider "s3" }}
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-s3"
              key: accesskey
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-s3"
              key: secretkey
{{- end }}
{{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 8 }}
{{- end }}
        volumeMounts:
        - name: cm-drupal
          readOnly: true
          mountPath: /usr/local/etc/php/conf.d/opcache-recommended.ini
          subPath: opcache-recommended.ini
        - name: cm-drupal
          readOnly: true
          mountPath: /usr/local/etc/php-fpm.d/www.conf
          subPath: www.conf
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/settings.php
          subPath: settings.php
          readOnly: true
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/extra.settings.php
          subPath: extra.settings.php
          readOnly: true
        - name: twig-cache
          mountPath: /cache/twig
{{- if not .Values.drupal.disableDefaultFilesMount }}
        - name: files
          mountPath: /var/www/html/sites/default/files
          subPath: public
        - name: files
          mountPath: /private
          subPath: private
{{- end }}
{{- if .Values.drupal.volumeMounts }}
{{ toYaml .Values.drupal.volumeMounts | indent 8 }}
{{- end }}
{{- if .Values.proxysql.enabled }}
      - name: proxysql
        image: proxysql/proxysql:2.1.0
        imagePullPolicy: Always
        ports:
          - containerPort: 6032
          - containerPort: 6033
        volumeMounts:
          - name: configfiles
            mountPath: "/etc/proxysql"
            readOnly: true
        livenessProbe:
          tcpSocket:
            port: 6032
          periodSeconds: 60
        command: ["/bin/sh", "-c", "proxysql --initial -f -c /etc/proxysql/proxysql.conf"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
          runAsGroup: 999
{{- else if .Values.pgbouncer.enabled }}
      - name: pgbouncer
        image: mcr.microsoft.com/azure-oss-db-tools/pgbouncer-sidecar:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 5432
        volumeMounts:
          - name: configfiles
            mountPath: "/etc/pgbouncer"
            readOnly: true
        livenessProbe:
          tcpSocket:
            port: 5432
          periodSeconds: 60
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "killall -INT pgbouncer && sleep 120"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ['all']
{{- end  }}
      {{- if .Values.drupal.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.drupal.imagePullSecrets | indent 8 }}
      {{- end }}
      # Allow non-root user to access PersistentVolume
      securityContext:
{{ toYaml .Values.drupal.securityContext | indent 8 }}
      volumes:
      - name: cm-drupal
        configMap:
          name: {{ include "drupal.fullname" . }}
      - name: twig-cache
        emptyDir: {}
{{- if .Values.drupal.persistence.enabled }}
      - name: files
        persistentVolumeClaim:
          claimName: {{ template "drupal.fullname" . }}-drupal
{{- else if or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled) }}
      - name: files-public
        persistentVolumeClaim:
          claimName: {{ include "drupal.fullname" . }}-public
      - name: files-private
        persistentVolumeClaim:
          claimName: {{ include "drupal.fullname" . }}-private
{{- else if not .Values.drupal.disableDefaultFilesMount }}
      - name: files
        emptyDir: {}
{{- end }}
{{- if .Values.proxysql.enabled }}
      - name: configfiles
        secret:
          secretName: {{ include "drupal.fullname" . }}-proxysql
{{- else if .Values.pgbouncer.enabled }}
      - name: configfiles
        secret:
           secretName: {{ include "drupal.fullname" . }}-pgbouncer
{{- end }}
{{- if .Values.drupal.volumes }}
{{ toYaml .Values.drupal.volumes | indent 6 }}
{{- end }}
{{- end }}

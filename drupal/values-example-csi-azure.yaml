# Default values for Site Example CSI Azure.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

ingress:
  enabled: true
  path: /
  hosts:
    - site.example.ca
  annotations:
    kubernetes.io/ingress.class: istio

## Drupal
## Ref: https://github.com/drupalwxt/helm-drupal
drupal:
  ## Drupal image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  ##
  image: example.azurecr.io/site-example
  tag: 1.0.0
  version: d9

  imagePullSecrets:
    - name: acr-registry

  ## Site configuration
  ##
  profile: wxt
  siteEmail: admin@example.com
  siteName: Drupal Install Profile (WxT)

  ## Application password
  ##
  password: XXXXX

  # php-fpm healthcheck
  # Requires https://github.com/renatomefi/php-fpm-healthcheck in the container.
  # (note: official images do not contain this feature yet)
  healthcheck:
    enabled: true

  # Switch to canada.ca theme (only used if install and/or reconfigure are enabled)
  # Common options include: theme-wet-boew, theme-gcweb-legacy
  wxtTheme: theme-gcweb

  # Install Drupal automatically
  install: false

  # Run migrations for default content
  migrate: false

  # PHP configuration
  php:
    ini:
      mysqlnd_azure.enableRedirect: off

  # Reconfigure on upgrade
  reconfigure: true
  cacheRebuildBeforeDatabaseMigration: true

  # Run extra install scripts
  # extraInstallScripts: |-
  #

  ## Extra settings.php settings
  ##
  extraSettings: |-
    $databases['default']['default']['pdo'][PDO::MYSQL_ATTR_SSL_CA] = '/etc/ssl/certs/ca-certificates.crt';
    $_SERVER['HTTPS'] = $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https' ? 'on' : 'off';
    $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];
    $settings['file_temp_path'] = '/drupal-tmp';
    $config['config_split.config_split.dev']['status'] = TRUE;

  extraUpgradeScripts: |-
    drush config:import --yes

  # Restore Drupal automatically
  restore:
    enabled: false

  # Configure the Drupal cron
  cron:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to once an hour
    schedule: '*/2 * * * *'

  # Configure additional Drupal crons
  additionalCrons:
    clean-backups:
      # Run at 03:00AM UTC every day.
      schedule: '00 03 * * *'
      script: |
        find /backup/ -mindepth 1 -maxdepth 1 -type d -mtime +30 -exec echo "rm -rf " {} \; 2>&1;
        find /backup/ -mindepth 1 -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \; 2>&1;

      volumes:
      - name: backup
        persistentVolumeClaim:
          claimName: example-drupal-backup

      volumeMounts:
      - name: backup
        mountPath: /backup

  # Configure the Drupal backup cron
  backup:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to midnight
    schedule: '0 0 * * *'

    volume:
      persistentVolumeClaim:
        claimName: example-drupal-backup

  # Allows custom /var/www/html/sites/default/files and /var/www/private mounts
  disableDefaultFilesMount: true

  volumes:
    - name: files-tmp
      persistentVolumeClaim:
        claimName: example-drupal-tmp

  volumeMounts:
    - name: files-public
      mountPath: /var/www/html/sites/default/files
    - name: files-private
      mountPath: /private
    - name: files-tmp
      mountPath: /drupal-tmp

  configSync:
    directory: "/var/www/config/sync"

## Nginx
## Ref: https://github.com/drupalwxt/helm-drupal
nginx:
  image: example.azurecr.io/site-example-nginx
  tag: 1.0.0

  imagePullSecrets:
    - name: acr-registry

  # Set your cluster's DNS resolution service here
  resolver: 10.0.0.10

  volumeMounts:
    - name: files-public
      mountPath: /var/www/html/sites/default/files

azure:
  storageClass:
    create: true

  ## Azure Files
  # kubectl create secret generic example-storage --from-literal=azurestorageaccountname=$STORAGE_ACCOUNT_NAME --from-literal=azurestorageaccountkey=$STORAGE_KEY -n catsa
  azureFile:
    enabled: true
    # storageClass: "-"

    size: 100Gi

    protocol: nfs

    public:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-public-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: public
            protocol: nfs

    private:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-private-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: public
            protocol: nfs

    backup:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-backup-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: backup
            protocol: nfs
    tmp:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-tmp-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: tmp
            protocol: nfs

## Redis
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/redis
redis:
  enabled: true
  global:
    redis:
      password: XXXXX
  image:
    pullSecrets:
      - acr-registry
  replica:
    enabled: false
    replicaCount: 0
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
  sentinel:
    enabled: false
  master:
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
  commonConfiguration: |-
    # Disable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no
    # Disable RDB persistence.
    save ""
    # Redis Memory
    maxmemory "8024mb"
    maxmemory-policy "volatile-lfu"

## Varnish
## Ref: https://github.com/StatCan/charts/tree/master/stable/varnish
varnish:
  enabled: true
  varnishd:
    image: docker.io/varnish
    imagePullSecrets:
      - name: acr-registry
  memorySize: 1G
  varnishConfigContent: |
    vcl 4.0;

    import std;
    import directors;

    backend nginx {
      .host = "{{ include "backend.fullname" . }}-nginx";
      .host_header = "{{ include "backend.fullname" . }}-nginx";
      .port = "80";
    }

    sub vcl_init {
      new backends = directors.round_robin();
      backends.add_backend(nginx);
    }

    sub vcl_recv {
      set req.http.X-Forwarded-Host = req.http.Host;
      if (!req.http.X-Forwarded-Proto) {
        set req.http.X-Forwarded-Proto = "http";
      }

      # Answer healthcheck
      if (req.url == "/_healthcheck" || req.url == "/healthcheck.txt") {
        return (synth(700, "HEALTHCHECK"));
      }

      # Answer splashpage
      if (req.url == "/") {
        return (synth(701, "SPLASH"));
      }

      set req.backend_hint = backends.backend();

      # Always cache certain file types
      # Remove cookies that Drupal doesn't care about
      if (req.url ~ "(?i)\.(asc|dat|tgz|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
        unset req.http.Cookie;
      } else if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        } else {
            return (pass);
        }
      }
      # If POST, PUT or DELETE, then don't cache
      if (req.method == "POST" || req.method == "PUT" || req.method == "DELETE") {
        return (pass);
      }
      # Happens before we check if we have this in cache already.
      #
      # Typically you clean up the request here, removing cookies you don't need,
      # rewriting the request, etc.
      return (hash);
      #return (pass);
    }

    sub vcl_backend_fetch {
      # NEW
      set bereq.http.Host = "{{ include "backend.fullname" . }}-nginx";

      # Don't add 127.0.0.1 to X-Forwarded-For
      set bereq.http.X-Forwarded-For = regsub(bereq.http.X-Forwarded-For, "(, )?127\.0\.0\.\d$", "");
    }

    sub vcl_backend_response {
      if (beresp.http.Location && beresp.http.Location !~ "^https://api.twitter.com/") {
        set beresp.http.Location = regsub(
          beresp.http.Location,
          "^https?://[^/]+/",
          bereq.http.X-Forwarded-Proto + "://" + bereq.http.X-Forwarded-Host + "/"
        );
      }
      # Only cache select response codes
      if (beresp.status == 200 || beresp.status == 203 || beresp.status == 204 || beresp.status == 206 || beresp.status == 300 || beresp.status == 301 || beresp.status == 404 || beresp.status == 405 || beresp.status == 410 || beresp.status == 414 || beresp.status == 501) {
        # Cache for 5 minutes
        set beresp.ttl = 5m;
        set beresp.grace = 12h;
        set beresp.keep = 24h;
      } else {
        set beresp.ttl = 0s;
      }
    }

    sub vcl_deliver {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Comment these for easier Drupal cache tag debugging in development.
      unset resp.http.Cache-Tags;
      unset resp.http.X-Drupal-Cache-Contexts;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca  *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net data:; font-src 'self' *.example.ca https://fonts.gstatic.com";

      # Add CORS Headers
      # if (req.http.Origin ~ "(?i)\.example\.ca$") {
      #   if (req.url ~ "\.(ttd|woff|woff2)(\?.*)?$") {
      #     set resp.http.Access-Control-Allow-Origin = "*";
      #     set resp.http.Access-Control-Allow-Methods = "GET";
      #   }
      # }

      # Add X-Frame-Options
      # if (req.url ~ "^/(en/|fr/)?media/") {
      #   set resp.http.X-Frame-Options = "SAMEORIGIN";
      # } else {
      #   set resp.http.X-Frame-Options = "DENY";
      # }

      set resp.http.X-Content-Type-Options = "nosniff";
      set resp.http.X-XSS-Protection = "1; mode=block";
      set resp.http.Strict-Transport-Security = "max-age=2629800";

      if (req.http.host ~ "site.example.ca") {
        set resp.http.X-Robots-Tag = "noindex, nofollow";
      }

      if (req.url ~ "^/(en/|fr/)?(search/|recherche/)site/") {
        set resp.http.X-Robots-Tag = "noindex, nofollow";
      }

      # Happens when we have all the pieces we need, and are about to send the
      # response to the client.
      #
      # You can do accounting or modifying the final object here.
      if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
      } else {
        set resp.http.X-Cache = "MISS";
      }
      # Handle errors
      # if ( (resp.status >= 500 && resp.status <= 599)
      #   || resp.status == 400
      #   || resp.status == 401
      #   || resp.status == 403
      #   || resp.status == 404) {
      #   return (synth(resp.status));
      # }
    }

    sub vcl_synth {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca data:;";
      # set resp.http.X-Content-Type-Options = "nosniff";
      # set resp.http.X-Frame-Options = "DENY";
      # set resp.http.X-XSS-Protection = "1; mode=block";

      set resp.http.Strict-Transport-Security = "max-age=2629800";

      # if (resp.status >= 500 && resp.status <= 599) {
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
      #   return (deliver);
      # } elseif (resp.status == 400) { # 400 - Bad Request
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/400.html"));
      #   return (deliver);
      # } elseif (resp.status == 401) { # 401 - Unauthorized
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/401.html"));
      #   return (deliver);
      # } elseif (resp.status == 403) { # 403 - Forbidden
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/403.html"));
      #   return (deliver);
      # } elseif (resp.status == 404) { # 404 - Not Found
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/404.html"));
      #   return (deliver);
      # } else
      if (resp.status == 700) { # Respond to healthcheck
        set resp.status = 200;
        set resp.http.Content-Type = "text/plain";
        synthetic ( {"OK"} );
        return (deliver);
      } elseif (resp.status == 701) { # Respond to splash
        set resp.status = 200;
        set resp.http.Content-Type = "text/html";
        synthetic(std.fileread("/splash/index.html"));
        return (deliver);
      }
    }

    ##
    # ERROR HANDLING
    ##
    # sub vcl_backend_error {
    #   set beresp.http.Content-Type = "text/html; charset=utf-8";
    #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
    #   return (deliver);
    # }

## External DB
## Ref: https://github.com/drupalwxt/helm-drupal
external:
  enabled: true
  driver: mysql
  port: 3306
  host: XXXXX.mysql.database.azure.com
  database: "example"
  user: examplemysqladmin
  password: XXXXX

## MySQL
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/mysql
mysql:
  enabled: false

## ProxySQL
## Ref: https://github.com/drupalwxt/helm-drupal
proxysql:
  enabled: false

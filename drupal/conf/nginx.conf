error_log /proc/self/fd/2;
pid /var/run/nginx.pid;
user root;
worker_processes auto;
worker_rlimit_nofile 500000;

events {
  multi_accept on;
  use epoll;
  worker_connections 8192;
}

http {
  access_log /proc/self/fd/1;
{{- if .Values.nginx.client_max_body_size }}
  client_max_body_size {{ .Values.nginx.client_max_body_size }};
{{- else }}
  client_max_body_size 20m;
{{- end }}
  default_type application/octet-stream;
  gzip on;
  gzip_buffers 16 8k;
  gzip_comp_level 4;
  gzip_disable msie6;
  gzip_proxied off;
  gzip_types application/json;
  gzip_vary on;
  include /etc/nginx/mime.types;
  index index.html index.htm;
  keepalive_timeout 240;
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
  proxy_temp_path /var/tmp;
  sendfile on;
  server_tokens off;
  tcp_nopush on;
  types_hash_max_size 2048;
  proxy_http_version 1.1;
  map_hash_max_size 262144;
  map_hash_bucket_size 262144;

  server {
      #IPv4
      listen 80;

      #IPv6
      listen [::]:80;

      # Filesystem root of the site and index with fallback.
      root /var/www/html;
      index index.php index.html index.htm;

      # Make site accessible from http://drupal.dev;
      server_name _;

      # Nginx health
      location /_healthz {
          access_log off;
          return 200 "OK";
      }

      location / {
          # First attempt to serve request as file, then
          # as directory, then fall back to displaying a 404.
          try_files $uri $uri/ /index.html /index.php?$query_string;
      }

      location ~ \.php$ {
        proxy_intercept_errors on;
        include fastcgi_params;
        fastcgi_read_timeout 120;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        fastcgi_intercept_errors on;
        fastcgi_pass {{ template "drupal.fullname" . }}:9000;
        fastcgi_buffers 16 32k;
        fastcgi_buffer_size 64k;
        fastcgi_busy_buffers_size 64k;
        try_files $uri =404;
      }

{{- if not (eq "none" .Values.files.provider) }}
      location ~* ^/(s3fs-css|s3fs-js|sites/default/files)/(.*) {
{{- if and (eq "minio" .Values.files.provider) (not .Values.files.cname.enabled) }}
        set $s3_base_path {{ print "http://" .Release.Name "-minio." .Release.Namespace ".svc." .Values.minio.clusterDomain ":" .Values.minio.service.port "/" .Values.minio.defaultBucket.name "/" .Values.files.folders.public | quote }};
{{- else if eq "minio" .Values.files.provider }}
        set $s3_base_path {{ print "https://" .Values.files.cname.hostname "/" .Values.minio.defaultBucket.name "/" .Values.files.folders.public | quote }};
{{- else }}
        set $s3_base_path 'https://empty.example.com';
{{- end }}
        set $file_path $2;

        resolver {{ .Values.nginx.resolver }} valid=5s;
        resolver_timeout 5s;

        proxy_http_version 1.1;
        proxy_pass $s3_base_path/$file_path;
      }

{{- if and (eq .Values.files.provider "minio") (not .Values.files.cname.enabled) }}
      location ~* ^/{{ .Values.minio.defaultBucket.name }}/{{ .Values.files.folders.public }}/(.*) {
        set $s3_base_path {{ print "http://" .Release.Name "-minio." .Release.Namespace ".svc." .Values.minio.clusterDomain ":" .Values.minio.service.port "/" .Values.minio.defaultBucket.name "/" .Values.files.folders.public | quote }};
        set $file_path $1;
        resolver {{ .Values.nginx.resolver }} valid=5s;
        resolver_timeout 5s;
        proxy_pass $s3_base_path/$file_path;
      }
{{- end }}
{{- end }}

      location ~ /\.ht {
        deny all;
      }
  }
}

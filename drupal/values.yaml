## Configure Ingress resource that allow you to access the Drupal installation
## Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  enabled: false
  # className: nginx
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

drupal:
  ## Drupal image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  ##
  image: drupalwxt/site-wxt

  ## Note that by default we use appVersion to get image tag
  # tag: 4.1.1

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName

  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: IfNotPresent

  replicas: 1


  # PHP configuration
  php:
    ini: {}
      # max_execution_time: 300

  ## User of the application
  ##
  username: admin

  ## Application password
  ##
  ## password: WxT2020

  ## Site configuration
  ##
  profile: wxt
  siteEmail: admin@example.com
  siteName: Drupal Install Profile (WxT)

  # Root path to serve the site on (ex. /subsite)
  # (NOTE: Root must always start with a / and should NOT have a trailing slash)
  siteRoot: /

  # Default WxT Library theme (only used if install and/or reconfigure are enabled)
  # Common options include: theme-wet-boew, theme-gcweb-legacy, theme-gcweb, ...
  wxtTheme: theme-gcweb

  ## Version of the application
  ##
  ## Supported versions: d8
  ##
  version: d9

  services: ''
  #  |-
  # parameters:
  #   cors.config:
  #     enabled: false
  #     # Specify allowed headers, like 'x-allowed-header'.
  #     allowedHeaders: []
  #     # Specify allowed request methods, specify ['*'] to allow all possible ones.
  #     allowedMethods: []
  #     # Configure requests allowed from specific origins.
  #     allowedOrigins: ['*']
  #     # Sets the Access-Control-Expose-Headers header.
  #     exposedHeaders: false
  #     # Sets the Access-Control-Max-Age header.
  #     maxAge: false
  #     # Sets the Access-Control-Allow-Credentials header.
  #     supportsCredentials: false

  ## Extra settings.php settings
  ##
  ## Note that if using Varnish and 'trusted_host_patterns' you need a pattern for your Helm release name:
  ## $settings['trusted_host_patterns'] = ['^example\.com$','^your-helm-release.*$'];
  ##
  extraSettings: ''
  #  |-
  #  $settings['trusted_host_patterns'] = ['^example\.com$'];

  ## Extra CLI scripts
  ##
  extraInstallScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  extraUpgradeScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  # Install Drupal automatically
  install: true

  # Restore Drupal automatically
  restore:
    enabled: false
    name: latest
    db: true
    files: false

    # Convert MyISAM to InnoDB
    convert: false

    # CHANGE THIS! Otherwise restore won't complete.
    volume: {}
      # emptyDir: {}

  # Run migrations for default content
  migrate: true

  # Reconfigure on upgrade
  reconfigure: true
  cacheRebuildBeforeDatabaseMigration: true
  lightningUpdate: true

  # Configure the Drupal cron
  cron:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to once an hour
    schedule: '0 * * * *'

  additionalCrons: {}
    # example:
    #   # Run at midnight UTC
    #   schedule: '0 0 * * *'

    #   script: |
    #     echo 'Hello, world!'

    #   volumes:
    #   - name: example-cron-disk
    #     azureFile:
    #       shareName: ''
    #       secretName: ''
    #   volumeMounts:
    #   - name: example-cron-disk
    #     mountPath: /path/to/folder
    #     readOnly: true

  # Configure the Drupal backup cron
  backup:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: false

    # CronJob schedule (standard cron syntax)
    # Defaults to midnight
    schedule: '0 0 * * *'

    # CHANGE THIS! Otherwise your backups will go away when the pod is gone.
    volume: {}
      # emptyDir: {}

    sqlDumpArgs: ''
      # additional arguments for sql-dump command
      # --skip-tables-list="table_0,table_1"

  # php-fpm healthcheck
  # Requires https://github.com/renatomefi/php-fpm-healthcheck in the container.
  healthcheck:
    enabled: true

  # Enable all of the WxT extension modules
  extensions:
    enabled: false

  serviceType: ClusterIP

  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## Drupal data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    annotations: {}
    accessMode: ReadWriteOnce
    size: 8Gi

  # Allows custom /var/www/html/sites/default/files and /private mounts
  disableDefaultFilesMount: false
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  volumeMounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

  securityContext:
    fsGroup: 82
    runAsUser: 82
    runAsGroup: 82

  smtp:
    host: mail
    tls: true
    starttls: true
    auth:
      enabled: false
      user: ''
      password: ''
      # Note: sSMTP only supports LOGIN and CRAM-MD5
      method: LOGIN

  # Use advanced configuration split logic
  configSplit:
    enabled: false

  podAnnotations: {}
  resources: {}
    # requests:
    #   memory: "256Mi"
    #   cpu: "100m"
    # limits:
    #   memory: "1Gi"
    #   cpu: "500m"

  # Fix permissions
  volumePermissions:
    enabled: false

  # Set an initContainers manually
  # initContainers:
  # - name: set-volume-permissions
  #   image: 'alpine:3.10'
  #   command:
  #     - chown
  #     - '-R'
  #     - '84:84'
  #     - /files/public
  #     - /files/private
  #   volumeMounts:
  #     - name: files-public
  #       mountPath: /files/public
  #     - name: files-private
  #       mountPath: /files/private
  #   securityContext:
  #     runAsUser: 0

  # Example of using both toleration and nodeSelector to deploy drupal on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

nginx:
  ## Nginx image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  image: drupalwxt/site-wxt
  ## Note that by default we use appVersion to get image tag
  # tag: 4.1.1-nginx

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName

  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: IfNotPresent

  replicas: 1

  # Set your cluster's DNS resolution service here
  resolver: kube-dns.kube-system.svc.cluster.local

  serviceType: ClusterIP

  customLocations: ""

  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## Nginx data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    annotations: {}
    accessMode: ReadWriteOnce
    size: 8Gi

  volumes:
  #  - name: nothing
  #    emptyDir: {}
  volumeMounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

  securityContext:
    enabled: true
    fsGroup: 33

  client_max_body_size: 20m
  real_ip_header: X-Forwarded-For

  # Example of using both toleration and nodeSelector to deploy nginx on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

# Specify an external database
# Useful for managed offerings from your Cloud Provider
external:
  enabled: false
  # Drupal DB driver
  driver: mysql
  port: 3306
  host: mysql.example.org
  # Credentials
  database: wxt
  user: wxt
  password: password
  # initCommands:
  #   - isolation: "SET SESSION tx_isolation='READ-COMMITTED'"
  # pdo:
  #   - PDO::MYSQL_ATTR_SSL_CA: '/etc/ssl/certs/ca-certificates.crt'

# Shared Disk logic
sharedDisk:
  enabled: false
  initMediaIconsFolder: true

  annotations: {}
  accessMode: ReadWriteMany
  size: 256Gi
  # storageClass: "-"

  maxShares: 2

  private:
    azureFile:
      secretName: drupal-storage
      shareName: drupal-private
      readOnly: false

# Azure File logic
azureFile:
  enabled: false
  initMediaIconsFolder: true

  annotations: {}
  accessMode: ReadWriteMany
  size: 100Gi
  storageClass: "azurefile"

  public:
    azureFile:
      secretName: drupal-storage
      shareName: drupal-public
      # secretNamespace: ""
      readOnly: false

  private:
    azureFile:
      secretName: drupal-storage
      shareName: drupal-private
      # secretNamespace: ""
      readOnly: false

  # mountOptions:
  #   - dir_mode=0777
  #   - file_mode=0777
  #   - uid=82
  #   - gid=82
  #   - mfsymlinks
  #   - nobrl
  #   - cache=none

## Configuration values for the MySQL dependency sub-chart
## ref: https://github.com/kubernetes/charts/blob/master/stable/mysql/README.md
mysql:
  enabled: true
  imageTag: 5.7.28

  ## Specify password for root user
  ##
  ## Default: random 10 character string
  # mysqlRootPassword: testing

  ## Create a database user
  ##
  mysqlUser: wxt
  ## Default: random 10 character string
  # mysqlPassword:

  ## Create a database
  ##
  mysqlDatabase: wxt

  ## Persist data to a persistent volume
  persistence:
    enabled: true
    # storageClass: managed-premium
    size: 128Gi

  # Custom mysql configuration files used to override default mysql settings
  configurationFiles:
    mysql.cnf: |-
      [mysqld]
      max_allowed_packet = 256M
      innodb_buffer_pool_size = 4096M
      innodb_buffer_pool_instances = 4
      table_definition_cache = 4096
      table_open_cache = 8192
      innodb_flush_log_at_trx_commit=2

  # Example of using both toleration and nodeSelector to deploy mysql on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

## Configuration values for the PostgreSQL dependency sub-chart
## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
postgresql:
  enabled: false
  image:
    tag: 11.6.0-debian-9-r0
  postgresqlUsername: wxt
  postgresqlPassword: ""
  postgresqlDatabase: wxt
  postgresqlConfiguration:
    listenAddresses: "'*'"
    maxConnections: "200"
    sharedBuffers: 512MB
    workMem: 2048MB
    effectiveCacheSize: 512MB
    maintenanceWorkMem: 32MB
    minWalSize: 512MB
    maxWalSize: 512MB
    walBuffers: 8048kB
    byteaOutput: "'escape'"
  persistence:
    enabled: true
    size: 50Gi
  volumePermissions:
    enabled: true
  service:
    port: 5432
  resources: {}
  #  requests:
  #    memory: "512Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1Gi"
  #    cpu: "500m"
  nodeSelector: {}

pgbouncer:
  enabled: false
  host: mypgserver.postgres.database.azure.com
  user: username@hostname
  password: password
  poolSize: 50
  maxClientConnections: 400

proxysql:
  enabled: false
  admin:
    user: username@hostname
    password: password
  monitor:
    user: username@hostname
    password: password
  configuration:
    maxConnections: 2048
    serverVersion: "5.7.28"
    stackSize: 1048576

## Configuration values for the Redis dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/README.md
redis:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 6.0.12-debian-10-r33
    # clientInterface: PhpRedis
  cluster:
    enabled: true
    slaveCount: 2
  sentinel:
    enabled: false
  master:
    service:
      type: ClusterIP
    disableCommands: []
  slave:
    service:
      type: ClusterIP
    disableCommands: []

## Configuration values for the Varnish dependency sub-chart
## ref: https://github.com/StatCan/charts/blob/master/stable/varnish/README.md
varnish:
  enabled: false
  varnishd:
    image: varnish
    tag: 6.5.1
    imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
  resources: {}
  #  requests:
  #    memory: "512Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1Gi"
  #    cpu: "500m"

  # Example of using both toleration and nodeSelector to deploy varnish on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

  affinity: {}

  varnishConfigContent: |
    vcl 4.0;

    import std;
    import directors;

    backend nginx {
      .host = "{{ include "backend.fullname" . }}-nginx";
      .host_header = "{{ include "backend.fullname" . }}-nginx";
      .port = "80";
    }

    sub vcl_init {
      new backends = directors.round_robin();
      backends.add_backend(nginx);
    }

    sub vcl_recv {
      set req.http.X-Forwarded-Host = req.http.Host;
      if (!req.http.X-Forwarded-Proto) {
        set req.http.X-Forwarded-Proto = "http";
      }

      # Answer healthcheck
      if (req.url == "/_healthcheck" || req.url == "/healthcheck.txt") {
        return (synth(700, "HEALTHCHECK"));
      }
      set req.backend_hint = backends.backend();

      # Answer healthcheck
      if (req.url == "/_healthcheck" || req.url == "/healthcheck.txt") {
        return (synth(700, "HEALTHCHECK"));
      }
      set req.backend_hint = backends.backend();

      # Always cache certain file types
      # Remove cookies that Drupal doesn't care about
      if (req.url ~ "(?i)\.(asc|dat|tgz|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
        unset req.http.Cookie;
      } else if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        } else {
            return (pass);
        }
      }
      # If POST, PUT or DELETE, then don't cache
      if (req.method == "POST" || req.method == "PUT" || req.method == "DELETE") {
        return (pass);
      }
      # Happens before we check if we have this in cache already.
      #
      # Typically you clean up the request here, removing cookies you don't need,
      # rewriting the request, etc.
      return (hash);
      #return (pass);
    }

    sub vcl_backend_fetch {
      # NEW
      set bereq.http.Host = "{{ include "backend.fullname" . }}-nginx";

      # Don't add 127.0.0.1 to X-Forwarded-For
      set bereq.http.X-Forwarded-For = regsub(bereq.http.X-Forwarded-For, "(, )?127\.0\.0\.1$", "");
    }

    sub vcl_backend_response {
      if (beresp.http.Location) {
        set beresp.http.Location = regsub(
          beresp.http.Location,
          "^https?://[^/]+/",
          bereq.http.X-Forwarded-Proto + "://" + bereq.http.X-Forwarded-Host + "/"
        );
      }
      # Only cache select response codes
      if (beresp.status == 200 || beresp.status == 203 || beresp.status == 204 || beresp.status == 206 || beresp.status == 300 || beresp.status == 301 || beresp.status == 404 || beresp.status == 405 || beresp.status == 410 || beresp.status == 414 || beresp.status == 501) {
        # Cache for 5 minutes
        set beresp.ttl = 5m;
        set beresp.grace = 12h;
        set beresp.keep = 24h;
      } else {
        set beresp.ttl = 0s;
      }
    }

    sub vcl_deliver {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Comment these for easier Drupal cache tag debugging in development.
      unset resp.http.Cache-Tags;
      unset resp.http.X-Drupal-Cache-Contexts;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca  *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net data:; font-src 'self' *.example.ca https://fonts.gstatic.com";

      # Add CORS Headers
      # if (req.http.Origin ~ "(?i)\.example\.ca$") {
      #   if (req.url ~ "\.(ttd|woff|woff2)(\?.*)?$") {
      #     set resp.http.Access-Control-Allow-Origin = "*";
      #     set resp.http.Access-Control-Allow-Methods = "GET";
      #   }
      # }

      # Add X-Frame-Options
      if (req.url ~ "^/livechat" || req.url ~ "^/(en/|fr/)?entity-browser/") {
        set resp.http.X-Frame-Options = "SAMEORIGIN";
      } else {
        set resp.http.X-Frame-Options = "DENY";
      }

      set resp.http.X-Content-Type-Options = "nosniff";
      set resp.http.X-XSS-Protection = "1; mode=block";

      # Happens when we have all the pieces we need, and are about to send the
      # response to the client.
      #
      # You can do accounting or modifying the final object here.
      if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
      } else {
        set resp.http.X-Cache = "MISS";
      }
      # Handle errors
      if ( (resp.status >= 500 && resp.status <= 599)
        || resp.status == 400
        || resp.status == 401
        || resp.status == 403
        || resp.status == 404) {
        return (synth(resp.status));
      }
    }

    sub vcl_synth {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca data:;";
      # set resp.http.X-Content-Type-Options = "nosniff";
      # set resp.http.X-Frame-Options = "DENY";
      # set resp.http.X-XSS-Protection = "1; mode=block";

      # if (resp.status >= 500 && resp.status <= 599) {
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
      #   return (deliver);
      # } elseif (resp.status == 400) { # 400 - Bad Request
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/400.html"));
      #   return (deliver);
      # } elseif (resp.status == 401) { # 401 - Unauthorized
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/401.html"));
      #   return (deliver);
      # } elseif (resp.status == 403) { # 403 - Forbidden
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/403.html"));
      #   return (deliver);
      # } elseif (resp.status == 404) { # 404 - Not Found
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/404.html"));
      #   return (deliver);
      # } else
      if (resp.status == 700) { # Respond to healthcheck
        set resp.status = 200;
        set resp.http.Content-Type = "text/plain";
        synthetic ( {"OK"} );
        return (deliver);
      }
    }

    ##
    # ERROR HANDLING
    ##
    # sub vcl_backend_error {
    #   set beresp.http.Content-Type = "text/html; charset=utf-8";
    #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
    #   return (deliver);
    # }

{{- if .Values.drupal.install }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "drupal.fullname" . }}-site-install
  labels:
    app.kubernetes.io/name: {{ include "drupal.name" . }}
    helm.sh/chart: {{ include "drupal.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "drupal.name" . }}
        helm.sh/chart: {{ include "drupal.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      restartPolicy: OnFailure
{{- if or (.Values.drupal.initContainers) (or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled)) }}
      initContainers:
{{- if .Values.sharedDisk.enabled }}
        - name: init-chown
          image: 'alpine:3.10'
          command:
            - chown
            - '-R'
            - '82:82'
            - /mnt/azure
          volumeMounts:
            - name: files-public
              mountPath: /mnt/azure
{{- end }}
{{- if or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled) }}
        - name: init-media-icons-folder
          image: 'alpine:3.10'
          command:
            - mkdir
            - '-p'
            - /files/media-icons/generic
          volumeMounts:
            - name: files-public
              mountPath: /files
{{- end }}
{{- if .Values.drupal.initContainers }}
{{ toYaml .Values.drupal.initContainers | indent 8 }}
{{- end }}
{{- end }}
      containers:
      - name: drush
        image: "{{ .Values.drupal.image }}:{{ default .Chart.AppVersion .Values.drupal.tag }}"
        imagePullPolicy: {{ default "" .Values.drupal.imagePullPolicy | quote }}
        command:
          - '/bin/sh'
          - '-c'
          - |
              # Errors should fail the job
              set -e

              # Wait for DB to be available
              until drush sql:query 'SHOW TABLES;'; do echo Waiting for DB; sleep 3; done
              echo DB available

              {{- if .Values.redis.enabled }}
              {{- if and .Values.redis.cluster.enabled .Values.redis.sentinel.enabled }}
              until [[ $(printf "AUTH $REDIS_PASSWORD\r\n" | nc -w 2 {{ .Release.Name }}-redis {{ .Values.redis.sentinel.service.sentinelPort }}) == $(printf "+OK\r\n") ]]; do echo Waiting for Redis; sleep 3; done
              {{- else }}
              until [[ $(printf "AUTH $REDIS_PASSWORD\r\n" | nc -w 2 {{ .Release.Name }}-redis-master {{ .Values.redis.master.service.port }}) == $(printf "+OK\r\n") ]]; do echo Waiting for Redis; sleep 3; done
              {{- end }}
              echo Redis available
              {{- end }}

              # Check Drush status
              drush status || true

              {{- if .Values.redis.enabled }}
              # Flush redis caches
              {{- if and .Values.redis.cluster.enabled .Values.redis.sentinel.enabled }}
              printf "AUTH $REDIS_PASSWORD\r\nFLUSHDB\r\n" | nc -w 2 {{ .Release.Name }}-redis {{ .Values.redis.sentinel.service.sentinelPort }}
              {{- else }}
              printf "AUTH $REDIS_PASSWORD\r\nFLUSHDB\r\n" | nc -w 2 {{ .Release.Name }}-redis-master {{ .Values.redis.master.service.port }}
              {{- end }}
              {{- end }}

              # Run site install
              {{- if .Values.drupal.restore.enabled }}

              # Check to see if using specific backup else use latest CHECK IF NAME SAYS LATEST
              {{- if eq .Values.drupal.restore.name "latest"}}
              BACKUPNAME=$(ls -td -- /backup/* | head -n 1 | sed -e "s/\/backup\///")
              {{- else }}
              BACKUPNAME='{{ .Values.drupal.restore.name }}'
              {{- end }}

              echo "Restoring backup: $BACKUPNAME"

              {{- if .Values.drupal.restore.db }}
              echo "Drop database"
              drush sql-drop -y
              echo "Restore database"
              gunzip -c /backup/$BACKUPNAME/db.sql.gz{{ if .Values.drupal.restore.convert }} | sed 's/MyISAM/InnoDB/g'{{ end }} | drush sql-cli
              echo "Database restored"
              {{- end }}

              {{- if .Values.drupal.restore.files }}
              echo "Deleting files"
              # Errors from deleting should not fail the job
              set +e
              find sites/default/files/ -type f -print0 | xargs -0 rm
              find sites/default/files/ -mindepth 1 -type d -print0 | xargs -0 rmdir
              find /private/ -type f -print0 | xargs -0 rm
              find /private/ -mindepth 1 -type d -print0 | xargs -0 rmdir
              set -e

              echo "Restoring files"
              tar -zxf /backup/$BACKUPNAME/files.tar.gz --directory sites/default/files --no-acls --no-xattrs -m --no-same-permissions --no-overwrite-dir
              tar -zxf /backup/$BACKUPNAME/private.tar.gz --directory /private --no-acls --no-xattrs -m --no-same-permissions --no-overwrite-dir
              echo "Files restored"
              {{- end }}

              # Run database updates
              {{- if .Values.drupal.cacheRebuildBeforeDatabaseMigration }}
              drush -y cache:rebuild
              {{- end }}
              drush -y updatedb

              # Lightning updates
              drush -y cache:rebuild
              drush -y update:lightning

              # WxT updates
              drush -y cache:rebuild
              drush -y update:wxt
              {{- else }}
              time drush site:install {{ .Values.drupal.profile }} \
                --sites-subdir=default \
                {{- if .Values.mysql.enabled }}
                --db-url="mysql://{{ .Values.mysql.mysqlUser }}:$MYSQL_PASSWORD@{{ .Release.Name }}-mysql:{{ .Values.mysql.service.port }}/{{ .Values.mysql.mysqlDatabase }}" \
                {{- else if .Values.postgresql.enabled }}
                --db-url="pgsql://{{ .Values.postgresql.postgresqlUsername }}:$POSTGRES_PASSWORD@{{ .Release.Name }}-postgresql:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.postgresqlDatabase }}" \
                {{- end }}
                --account-name={{ .Values.drupal.username }} \
                --account-pass=$DRUPAL_ADMIN_PASSWORD \
                --site-mail={{ .Values.drupal.siteEmail | quote }} \
                --site-name={{ .Values.drupal.siteName | quote }} \
                {{- if .Values.drupal.extensions.enabled }}
                {{- if semverCompare ">=0.11.8" .Chart.AppVersion }}
                wxt_extension_configure_form.all_wxt='TRUE' \
                {{- else }}
                wxt_extension_configure_form.select_all='TRUE' \
                {{- end }}
                {{- end }}
                install_configure_form.update_status_module='array(FALSE,FALSE)' \
                --yes
              {{- end }}

              drush -y cache:rebuild

              {{- if .Values.redis.enabled }}
              # Enable redis
              drush -y pm:enable redis
              {{- end }}

              # Change WxT theme
              {{- if .Values.drupal.wxtTheme }}
              drush -y config:set wxt_library.settings wxt.theme '{{ .Values.drupal.wxtTheme }}'
              {{- end }}

              # Rebuild caches
              drush -y cache:rebuild

              # Migrate content
              {{- if .Values.drupal.migrate }}
              drush -y migrate:import wxt_file
              drush -y migrate:import --group wxt --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Core'
              drush -y migrate:import --group gcweb --tag 'Menu'

              # Disable maintenance mode
              drush -y state:set system.maintenance_mode FALSE
              {{- end }}

              # Extra installation scripts
              {{- if .Values.drupal.extraInstallScripts }}
              {{ .Values.drupal.extraInstallScripts | nindent 14}}
              {{- end }}
        env:
{{- if .Values.external.enabled }}
        - name: EXTERNAL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "drupal.fullname" . }}
              key: databasePassword
{{- else if .Values.mysql.enabled }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              # This is not ideal, but calling {{ include "mysql.secretName" . }}
              # was returning the wrong result.
              name: "{{ .Release.Name }}-mysql"
              key: mysql-password
{{- else if .Values.postgresql.enabled }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-postgresql"
              key: postgresql-password
{{- end }}
{{- if .Values.redis.enabled }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-redis"
              key: redis-password
{{- end }}
        - name: DRUPAL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ include "drupal.fullname" . }}"
              key: password
{{- if .Values.extraVars }}
{{ toYaml .Values.extraVars | indent 8 }}
{{- end }}
        volumeMounts:
        - name: cm-drupal
          readOnly: true
          mountPath: /usr/local/etc/php/php.ini
          subPath: php.ini
        - name: cm-drupal
          readOnly: true
          mountPath: /usr/local/etc/php/conf.d/opcache-recommended.ini
          subPath: opcache-recommended.ini
        - name: cm-drupal
          readOnly: true
          mountPath: /usr/local/etc/php-fpm.d/www.conf
          subPath: www.conf
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/settings.php
          subPath: settings.php
          readOnly: true
        - name: cm-drupal
          mountPath: /var/www/html/sites/default/extra.settings.php
          subPath: extra.settings.php
          readOnly: true
        - name: twig-cache
          mountPath: /cache/twig
{{- if .Values.drupal.restore.enabled }}
        - name: backup
          mountPath: /backup
{{- end }}
{{- if not .Values.drupal.disableDefaultFilesMount }}
        - name: files
          mountPath: /var/www/html/sites/default/files
          subPath: public
        - name: files
          mountPath: /private
          subPath: private
{{- end }}
{{- if .Values.drupal.volumeMounts }}
{{ toYaml .Values.drupal.volumeMounts | indent 8 }}
{{- end }}
{{- if .Values.proxysql.enabled }}
      - name: proxysql
        image: proxysql/proxysql:2.1.0
        imagePullPolicy: Always
        ports:
          - containerPort: 6032
          - containerPort: 6033
        volumeMounts:
          - name: configfiles
            mountPath: "/etc/proxysql"
            readOnly: true
        livenessProbe:
          tcpSocket:
            port: 6032
          periodSeconds: 60
        command: ["/usr/bin/proxysql", "--initial", "-f", "-c", "/etc/proxysql/proxysql.conf"]
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
          runAsGroup: 999
{{- else if .Values.pgbouncer.enabled }}
      - name: pgbouncer
        image: mcr.microsoft.com/azure-oss-db-tools/pgbouncer-sidecar:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 5432
        volumeMounts:
          - name: configfiles
            mountPath: "/etc/pgbouncer"
            readOnly: true
        livenessProbe:
          tcpSocket:
            port: 5432
          periodSeconds: 60
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "killall -INT pgbouncer && sleep 120"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ['all']
{{- end  }}
      {{- if .Values.drupal.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.drupal.imagePullSecrets | indent 8 }}
      {{- end }}
      # Allow non-root user to access PersistentVolume
      securityContext:
{{ toYaml .Values.drupal.securityContext | indent 8 }}
      volumes:
      - name: cm-drupal
        configMap:
          name: {{ include "drupal.fullname" . }}
      - name: twig-cache
        emptyDir: {}
{{- if .Values.drupal.restore.enabled }}
      - name: backup
{{ toYaml .Values.drupal.restore.volume | indent 8 }}
{{- end }}
{{- if .Values.drupal.persistence.enabled }}
      - name: files
        persistentVolumeClaim:
          claimName: {{ template "drupal.fullname" . }}-drupal
{{- else if or (.Values.azureFile.enabled) (.Values.sharedDisk.enabled) }}
      - name: files-public
        persistentVolumeClaim:
          claimName: {{ include "drupal.fullname" . }}-public
      - name: files-private
        persistentVolumeClaim:
          claimName: {{ include "drupal.fullname" . }}-private
{{- else if not .Values.drupal.disableDefaultFilesMount }}
      - name: files
        emptyDir: {}
{{- end }}
{{- if .Values.proxysql.enabled }}
      - name: configfiles
        secret:
          secretName: {{ include "drupal.fullname" . }}-proxysql
{{- else if .Values.pgbouncer.enabled }}
      - name: configfiles
        secret:
           secretName: {{ include "drupal.fullname" . }}-pgbouncer
{{- end }}
{{- if .Values.drupal.volumes }}
{{ toYaml .Values.drupal.volumes | indent 6 }}
{{- end }}
{{- end }}

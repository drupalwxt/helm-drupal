## Configure Ingress resource that allow you to access the Drupal installation
## Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  enabled: false
  # className: nginx
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

extraEnvVars: []

netpol:
  enabled: false
  openshift:
    enabled: false

## Configuration values for the Drupal chart
## ref: https://github.com/drupalwxt/helm-drupal/blob/master/README.md
drupal:
  ## Drupal image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  ##
  image: drupalwxt/site-wxt

  ## Note that by default we use appVersion to get image tag
  # tag: 5.0.1

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName

  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: IfNotPresent

  replicas: 1

  # PHP configuration
  php:
    ini: {}
      # max_execution_time: 300
    fpm: |-
      pm.max_children = 50
      pm.start_servers = 5
      pm.min_spare_servers = 5
      pm.max_spare_servers = 35

  ## User of the application
  ##
  username: admin

  ## Application password
  ##
  ## password: WxT2020

  ## Site configuration
  ##
  profile: wxt
  siteEmail: admin@example.com
  siteName: Drupal Install Profile (WxT)

  # Root path to serve the site on (ex. /subsite)
  # (NOTE: Root must always start with a / and should NOT have a trailing slash)
  siteRoot: /

  # Default WxT Library theme (only used if install and/or reconfigure are enabled)
  # Common options include: theme-wet-boew, theme-gcweb-legacy, theme-gcweb, ...
  theme: theme-gcweb

  ## Version of the application
  ##
  ## Supported versions: d8
  ##
  version: d9

  services: ''
  #  |-
  # parameters:
  #   cors.config:
  #     enabled: false
  #     # Specify allowed headers, like 'x-allowed-header'.
  #     allowedHeaders: []
  #     # Specify allowed request methods, specify ['*'] to allow all possible ones.
  #     allowedMethods: []
  #     # Configure requests allowed from specific origins.
  #     allowedOrigins: ['*']
  #     # Sets the Access-Control-Expose-Headers header.
  #     exposedHeaders: false
  #     # Sets the Access-Control-Max-Age header.
  #     maxAge: false
  #     # Sets the Access-Control-Allow-Credentials header.
  #     supportsCredentials: false

  ## Extra settings.php settings
  ##
  ## Note that if using Varnish and 'trusted_host_patterns' you need a pattern for your Helm release name:
  ## $settings['trusted_host_patterns'] = ['^example\.com$','^your-helm-release.*$'];
  ##
  extraSettings: ''
  #  |-
  #  $settings['trusted_host_patterns'] = ['^example\.com$'];

  ## Extra CLI scripts
  ##
  preInstallScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  postInstallScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  preUpgradeScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  postUpgradeScripts: ''
  #  |-
  #  drush config-set system.performance js.preprocess 0 -y;
  #  drush config-set system.performance css.preprocess 0 -y;

  # -- default script used to detect when the DB is ready
  dbAvailabilityScript: |-
    until drush sql:query 'SHOW TABLES;'; do echo Waiting for DB; sleep 3; done
    echo DB available

  # Install Drupal automatically
  install: true

  # Restore Drupal automatically
  restore:
    enabled: false
    name: latest
    db: true
    files: false
    suppressTarErrors: false

    # Convert MyISAM to InnoDB
    convert: false

    # CHANGE THIS! Otherwise restore won't complete.
    volume: {}
      # emptyDir: {}

  # Run migrations for default content
  migrate: true

  # Reconfigure on upgrade
  reconfigure: true
  cacheRebuildBeforeDatabaseMigration: true
  updateDBBeforeDatabaseMigration: true

  # Restrict how many attempt install and/or reconfigure jobs will try in case of failure. Default is 6.
  # backoffLimitInstall: 1
  # backoffLimitReconfigure: 1

  # podDisruptionBudget:
  #   minAvailable: 1
  #   maxUnavailable: 1

  # Configure the Drupal cron
  cron:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to once an hour
    schedule: '0 * * * *'

    preInstallScripts: ''
    #  |-
    #  drush config-set system.performance js.preprocess 0 -y;
    #  drush config-set system.performance css.preprocess 0 -y;

    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1

  additionalCrons: {}
    # example:
    #   # Run at midnight UTC
    #   schedule: '0 0 * * *'

    #   script: |
    #     echo 'Hello, world!'

    #   volumes:
    #   - name: example-cron-disk
    #     azureFile:
    #       shareName: ''
    #       secretName: ''
    #   volumeMounts:
    #   - name: example-cron-disk
    #     mountPath: /path/to/folder
    #     readOnly: true

  # Configure the Drupal backup cron
  backup:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: false

    # CronJob schedule (standard cron syntax)
    # Defaults to midnight
    schedule: '0 0 * * *'

    # CHANGE THIS! Otherwise your backups will go away when the pod is gone.
    volume: {}
      # emptyDir: {}

    sqlDumpArgs: ''
      # additional arguments for sql-dump command
      # --skip-tables-list="table_0,table_1"

    filesArgs: ''
      # additional arguments for tar command that backup public files
      # --exclude="sites/default/files/js" --exclude="sites/default/files/css"

    privateArgs: ''
      # additional arguments for sql-dump command that backup private files
      # --exclude="/private/junk"

  # php-fpm healthcheck
  # Requires https://github.com/renatomefi/php-fpm-healthcheck in the container.
  healthcheck:
    enabled: true

  # Enable all of the WxT extension modules
  extensions:
    enabled: true

  serviceType: ClusterIP

  persistence:
    enabled: false
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## Drupal data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    annotations: {}
    accessMode: ReadWriteOnce
    size: 8Gi

  # Allows custom /var/www/html/sites/default/files and /private mounts
  disableDefaultFilesMount: false
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  volumeMounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

  securityContext: {}
    # fsGroup: 82
    # runAsUser: 82
    # runAsGroup: 82

  smtp:
    host: mail
    tls: true
    starttls: true
    auth:
      enabled: false
      user: ''
      password: ''
      # Note: sSMTP only supports LOGIN and CRAM-MD5
      method: LOGIN

  configSync:
    directory: "/private/config/sync"

  # Use advanced configuration split logic
  configSplit:
    enabled: false

  podAnnotations: {}
  resources: {}
    # requests:
    #   memory: "256Mi"
    #   cpu: "100m"
    # limits:
    #   memory: "1Gi"
    #   cpu: "500m"

  # Fix permissions
  volumePermissions:
    enabled: false

  ## Drupal pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    ## @param serviceAccount.create Enable the creation of a ServiceAccount for Drupal pods
    ##
    create: true
    ## @param serviceAccount.name Name of the created ServiceAccount
    ## If not set and create is true, a name is generated using the drupal.fullname template
    ##
    name: ""
    ## @param serviceAccount.annotations Annotations for Drupal Service Account
    ##
    annotations: {}
    ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
    ##
    automountServiceAccountToken: true

  # Set an initContainers manually
  # initContainers:
  # - name: set-volume-permissions
  #   image: 'alpine:3.10'
  #   command:
  #     - chown
  #     - '-R'
  #     - '84:84'
  #     - /files/public
  #     - /files/private
  #   volumeMounts:
  #     - name: files-public
  #       mountPath: /files/public
  #     - name: files-private
  #       mountPath: /files/private
  #   securityContext:
  #     runAsUser: 0

  # Example of using both toleration and nodeSelector to deploy drupal on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  command: []

  args: []

## Configuration values for the Drupal chart
## ref: https://github.com/drupalwxt/helm-drupal/blob/master/README.md
nginx:
  ## Nginx image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  image: drupalwxt/site-wxt
  ## Note that by default we use appVersion to get image tag
  # tag: 5.0.1-nginx

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName

  ## Specify a imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: IfNotPresent

  replicas: 1

  # Set your cluster's DNS resolution service here
  resolver: kube-dns.kube-system.svc.cluster.local

  serviceType: ClusterIP

  customLocations: ""

  volumes:
  #  - name: nothing
  #    emptyDir: {}
  volumeMounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

  securityContext: {}
    # fsGroup: 33

  gzip: true
  client_max_body_size: 20m
  real_ip_header: X-Forwarded-For

  resources: {}
    # requests:
    #   memory: "200Mi"
    #   cpu: "250m"
    # limits:
    #   memory: "500Mi"
    #   cpu: "400m"

  # Example of using both toleration and nodeSelector to deploy nginx on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

# Specify an external database
# Useful for managed offerings from your Cloud Provider
external:
  enabled: false
  # Drupal DB driver
  driver: mysql
  port: 3306
  host: mysql.example.org
  # Credentials
  database: wxt
  user: wxt
  password: password
  # initCommands:
  #   - isolation: "SET SESSION tx_isolation='READ-COMMITTED'"
  # pdo:
  #   - PDO::MYSQL_ATTR_SSL_CA: '/etc/ssl/certs/ca-certificates.crt'

azure:
  storageClass:
    create: false

  # Azure File logic
  azureFile:
    enabled: false
    folders: ["backup", "private", "public", "tmp"]

    # Uncomment next line if you want to disable specifying a volume name on the public and private PVCs
    # disableVolumeName: true

    # Uncomment next line if you want to disable the manual creation of PV and let the PVC handle it automatically
    # disablePVCreation: true

    initMediaIconsFolder: true

    annotations: {}
    accessMode: ReadWriteMany
    size: 256Gi
    # storageClass: "-"

    protocol: smb

    public:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-public
        #   secretNamespace: ""
        #   readOnly: false

        # csi:
        #   driver: file.csi.azure.com
        #   volumeHandle: ""
        #   volumeAttributes:
        #     resourceGroup: ""
        #     storageAccount: ""
        #     shareName: public
        #     protocol: nfs

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

    private:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-private
        #   secretNamespace: ""
        #   readOnly: false

        # csi:
        #   driver: file.csi.azure.com
        #   volumeHandle: ""
        #   volumeAttributes:
        #     resourceGroup: ""
        #     storageAccount: ""
        #     shareName: private
        #     protocol: nfs

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

    backup:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-backup
        #   secretNamespace: ""
        #   readOnly: false

        # csi:
        #   driver: file.csi.azure.com
        #   volumeHandle: ""
        #   volumeAttributes:
        #     resourceGroup: ""
        #     storageAccount: ""
        #     shareName: backup
        #     protocol: nfs

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

    tmp:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-tmp
        #   secretNamespace: ""
        #   readOnly: false

        # csi:
        #   driver: file.csi.azure.com
        #   volumeHandle: ""
        #   volumeAttributes:
        #     resourceGroup: ""
        #     storageAccount: ""
        #     shareName: tmp
        #     protocol: nfs

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

  # Shared Disk logic
  sharedDisk:
    enabled: false
    folders: ["private", "public"]

    # Uncomment next line if you want to disable specifying a volume name on the public and private PVCs
    # disableVolumeName: true

    # Uncomment next line if you want to disable the manual creation of PV and let the PVC handle it automatically
    # disablePVCreation: true

    initMediaIconsFolder: true

    annotations: {}
    accessMode: ReadWriteMany
    size: 256Gi
    # storageClass: "-"

    maxShares: 2

    public:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-public
        #   readOnly: false

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

    private:
      spec: {}
        # azureFile:
        #   secretName: drupal-storage
        #   shareName: drupal-private
        #   readOnly: false

      # mountOptions:
      #   - dir_mode=0777
      #   - file_mode=0777
      #   - uid=82
      #   - gid=82
      #   - mfsymlinks
      #   - nobrl
      #   - cache=none

## Configuration values for the MySQL dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/mysql/README.md
mysql:
  enabled: true
  image:
    tag: 8.0.29-debian-11-r3
  auth:
    rootPassword: ""
    database: wxt
    username: wxt
    password: ""
  primary:
    persistence:
      enabled: true
      # storageClass: managed-premium
      size: 128Gi
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0
      transaction_isolation="READ-COMMITTED"

      max_allowed_packet = 256M
      innodb_buffer_pool_size = 4096M
      innodb_buffer_pool_instances = 4
      table_definition_cache = 4096
      table_open_cache = 8192
      innodb_flush_log_at_trx_commit=2

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
  volumePermissions:
    enabled: true

## Configuration values for the PostgreSQL dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md
postgresql:
  enabled: false
  image:
    tag: 14.3.0-debian-11-r3
  auth:
    enablePostgresUser: true
    postgresPassword: ""
    username: "wxt"
    password: ""
    database: "wxt"
  primary:
    persistence:
      enabled: true
      # storageClass: managed-premium
      size: 128Gi
    configuration: |-
      listen_addresses='*'
      max_connections=200
      shared_buffers='512MB'
      work_mem='2048MB'
      effective_cache_size='512MB'
      maintenance_work_mem='32MB'
      min_wal_size='512MB'
      max_wal_size='512MB'
      wal_buffer='8048kB'
      bytea_output='escape'
  volumePermissions:
    enabled: true

pgbouncer:
  enabled: false
  host: mypgserver.postgres.database.azure.com
  user: username@hostname
  password: password
  poolSize: 50
  maxClientConnections: 400

proxysql:
  enabled: false
  admin:
    user: username@hostname
    password: password
  monitor:
    user: username@hostname
    password: password
  configuration:
    maxConnections: 2048
    serverVersion: "5.7.28"
    stackSize: 1048576

## Configuration values for the Redis dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/README.md
redis:
  enabled: false
  replica:
    enabled: false
    replicaCount: 0
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
  sentinel:
    enabled: false
  master:
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
  commonConfiguration: |-
    # Disable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no
    # Disable RDB persistence.
    save ""

## Configuration values for the Solr dependency sub-chart
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/README.md
solr:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/solr
    tag: 9.2.1-debian-11-r16
  cloudEnabled: false
  cloudBootstrap: false
  zookeeper:
    enabled: false
  replicaCount: 1
  collectionReplicas: 1

## Configuration values for the Varnish dependency sub-chart
## ref: https://github.com/statcan/charts/blob/master/stable/varnish/README.md
varnish:
  enabled: false
  varnishd:
    image: varnish
    tag: 6.5.1
    imagePullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
  resources: {}
  #  requests:
  #    memory: "512Mi"
  #    cpu: "100m"
  #  limits:
  #    memory: "1Gi"
  #    cpu: "500m"

  # Example of using both toleration and nodeSelector to deploy varnish on an AKS Spot instance
  # node pool:
  tolerations: []
  # - key: "kubernetes.azure.com/scalesetpriority"
  #   operator: "Equal"
  #   value: "spot"
  #   effect: "NoSchedule"

  nodeSelector: {}
  #   kubernetes.azure.com/scalesetpriority: "spot"

  affinity: {}

  varnishConfigContent: |
    vcl 4.0;

    import std;
    import directors;

    backend nginx {
      .host = "{{ include "backend.fullname" . }}-nginx";
      .host_header = "{{ include "backend.fullname" . }}-nginx";
      .port = "8080";
    }

    sub vcl_init {
      new backends = directors.round_robin();
      backends.add_backend(nginx);
    }

    sub vcl_recv {
      set req.http.X-Forwarded-Host = req.http.Host;
      if (!req.http.X-Forwarded-Proto) {
        set req.http.X-Forwarded-Proto = "http";
      }

      # Answer healthcheck
      if (req.url == "/_healthcheck" || req.url == "/healthcheck.txt") {
        return (synth(700, "HEALTHCHECK"));
      }

      # Answer splashpage
      # if (req.url == "/") {
      #   return (synth(701, "SPLASH"));
      # }

      set req.backend_hint = backends.backend();

      # Always cache certain file types
      # Remove cookies that Drupal doesn't care about
      if (req.url ~ "(?i)\.(asc|dat|tgz|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
        unset req.http.Cookie;
      } else if (req.http.Cookie) {
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        } else {
            return (pass);
        }
      }
      # If POST, PUT or DELETE, then don't cache
      if (req.method == "POST" || req.method == "PUT" || req.method == "DELETE") {
        return (pass);
      }
      # Happens before we check if we have this in cache already.
      #
      # Typically you clean up the request here, removing cookies you don't need,
      # rewriting the request, etc.
      return (hash);
      #return (pass);
    }

    sub vcl_backend_fetch {
      # NEW
      set bereq.http.Host = "{{ include "backend.fullname" . }}-nginx";

      # Don't add 127.0.0.1 to X-Forwarded-For
      set bereq.http.X-Forwarded-For = regsub(bereq.http.X-Forwarded-For, "(, )?127\.0\.0\.\d$", "");
    }

    sub vcl_backend_response {
      if (beresp.http.Location && beresp.http.Location !~ "^https://api.twitter.com/") {
        set beresp.http.Location = regsub(
          beresp.http.Location,
          "^https?://[^/]+/",
          bereq.http.X-Forwarded-Proto + "://" + bereq.http.X-Forwarded-Host + "/"
        );
      }
      # Only cache select response codes
      if (beresp.status == 200 || beresp.status == 203 || beresp.status == 204 || beresp.status == 206 || beresp.status == 300 || beresp.status == 301 || beresp.status == 404 || beresp.status == 405 || beresp.status == 410 || beresp.status == 414 || beresp.status == 501) {
        # Cache for 5 minutes
        set beresp.ttl = 5m;
        set beresp.grace = 12h;
        set beresp.keep = 24h;
      } else {
        set beresp.ttl = 0s;
      }
    }

    sub vcl_deliver {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Comment these for easier Drupal cache tag debugging in development.
      unset resp.http.Cache-Tags;
      unset resp.http.X-Drupal-Cache-Contexts;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca  *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net data:; font-src 'self' *.example.ca https://fonts.gstatic.com";

      # Add CORS Headers
      # if (req.http.Origin ~ "(?i)\.example\.ca$") {
      #   if (req.url ~ "\.(ttd|woff|woff2)(\?.*)?$") {
      #     set resp.http.Access-Control-Allow-Origin = "*";
      #     set resp.http.Access-Control-Allow-Methods = "GET";
      #   }
      # }

      # Add X-Frame-Options
      # if (req.url ~ "^/(en/|fr/)?media/") {
      #   set resp.http.X-Frame-Options = "SAMEORIGIN";
      # } else {
      #   set resp.http.X-Frame-Options = "DENY";
      # }

      set resp.http.X-Content-Type-Options = "nosniff";
      set resp.http.X-XSS-Protection = "1; mode=block";
      set resp.http.Strict-Transport-Security = "max-age=2629800";

      if (req.http.host ~ "site.example.ca") {
        set resp.http.X-Robots-Tag = "noindex, nofollow";
      }

      if (req.url ~ "^/(en/|fr/)?(search/|recherche/)site/") {
        set resp.http.X-Robots-Tag = "noindex, nofollow";
      }

      # Happens when we have all the pieces we need, and are about to send the
      # response to the client.
      #
      # You can do accounting or modifying the final object here.
      if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
      } else {
        set resp.http.X-Cache = "MISS";
      }
      # Handle errors
      if ( (resp.status >= 500 && resp.status <= 599)
        || resp.status == 400
        || resp.status == 401
        || resp.status == 403
        || resp.status == 404) {
        return (synth(resp.status));
      }
    }

    sub vcl_synth {
      # Remove identifying information
      unset resp.http.Server;
      unset resp.http.X-Powered-By;
      unset resp.http.X-Varnish;
      unset resp.http.Via;

      # Add Content-Security-Policy
      # set resp.http.Content-Security-Policy = "default-src 'self' *.example.ca; style-src 'self' 'unsafe-inline' *.example.ca; script-src 'self' 'unsafe-inline' 'unsafe-eval' *.example.ca *.adobedtm.com use.fontawesome.com blob:; connect-src 'self' *.example.ca *.omtrdc.net *.demdex.net *.everesttech.net; img-src 'self' *.example.ca data:;";
      # set resp.http.X-Content-Type-Options = "nosniff";
      # set resp.http.X-Frame-Options = "DENY";
      # set resp.http.X-XSS-Protection = "1; mode=block";

      set resp.http.Strict-Transport-Security = "max-age=2629800";

      # if (resp.status >= 500 && resp.status <= 599) {
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
      #   return (deliver);
      # } elseif (resp.status == 400) { # 400 - Bad Request
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/400.html"));
      #   return (deliver);
      # } elseif (resp.status == 401) { # 401 - Unauthorized
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/401.html"));
      #   return (deliver);
      # } elseif (resp.status == 403) { # 403 - Forbidden
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/403.html"));
      #   return (deliver);
      # } elseif (resp.status == 404) { # 404 - Not Found
      #   set resp.http.Content-Type = "text/html; charset=utf-8";
      #   synthetic(std.fileread("/data/configuration/varnish/errors/404.html"));
      #   return (deliver);
      # } else
      if (resp.status == 700) { # Respond to healthcheck
        set resp.status = 200;
        set resp.http.Content-Type = "text/plain";
        synthetic ( {"OK"} );
        return (deliver);
      }
      # elseif (resp.status == 701) { # Respond to splash
      #   set resp.status = 200;
      #   set resp.http.Content-Type = "text/html";
      #   synthetic(std.fileread("/splash/index.html"));
      #   return (deliver);
      # }
    }

    ##
    # ERROR HANDLING
    ##
    # sub vcl_backend_error {
    #   set beresp.http.Content-Type = "text/html; charset=utf-8";
    #   synthetic(std.fileread("/data/configuration/varnish/errors/503.html"));
    #   return (deliver);
    # }

solr:
  enabled: false

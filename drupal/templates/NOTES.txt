
{{- if .Values.drupal.install }}

**********************
** CONGRATULATIONS! **
**********************

Your Drupal site has been installed.

{{- else }}

Drupal was not installed. You may now restore a Drupal site or setup a new one with:

export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},tier=drupal" -o jsonpath="{.items[0].metadata.name}")

# Run drush site:install
kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush si {{ .Values.drupal.profile }} \
    --sites-subdir=default \
    --db-url={{ print "mysql://" .Values.mysql.auth.username ":YOUR_MYSQL_PASSWORD@" .Release.Name "-mysql:3306/ " .Values.mysql.auth.database | quote }} \
    --account-name={{ .Values.drupal.username | quote }} \
    --account-pass=YOUR_ACCOUNT_PASSWORD \
    --site-mail={{ .Values.drupal.siteEmail | quote }} \
    --site-name={{ .Values.drupal.siteName | quote }} \
    install_configure_form.update_status_module='array(FALSE,FALSE)' \
    --yes

{{- end }}

** To access your Drupal site

{{- if .Values.ingress.enabled }}

  Visit http://{{ index .Values.ingress.hosts 0 }}{{ .Values.ingress.path }}

{{- else if contains "LoadBalancer" .Values.nginx.serviceType }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template "drupal.fullname" . }}'

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "drupal.fullname" . }}-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

  echo http://$SERVICE_IP/

{{- else if contains "ClusterIP"  .Values.nginx.serviceType }}

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},tier=frontend" -o jsonpath="{.items[0].metadata.name}")
  kubectl port-forward $POD_NAME 8080:80

{{- else if contains "NodePort" .Values.nginx.serviceType }}

  Or running:

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "drupal.fullname" . }})-nginx

  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")

  echo http://$NODE_IP:$NODE_PORT/

{{- end }}

** Migrations

{{- if or (not .Values.drupal.migrate) (not .Values.drupal.install) (not .Values.drupal.reconfigure) }}

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},tier=drupal" -o jsonpath="{.items[0].metadata.name}")

  # Baseline migrations for Canada.ca
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import wxt_file
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import --group wxt --tag 'Core'
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import --group gcweb --tag 'Core'
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import --group gcweb --tag 'Menu'

  # Group migration
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import --group gcweb --tag 'Menu'
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush php-eval 'node_access_rebuild();'

{{- else }}

  Default Canada.ca content migrations have been run.

  To perform additional migrations, run:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},tier=drupal" -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush migrate:import $MIGRATION

{{- end }}

** Login

  echo Username: {{ .Values.drupal.username }}
  echo Password: $(kubectl get secret --namespace {{ .Release.Namespace }} {{ template "drupal.fullname" . }} -o jsonpath="{.data.password}" | base64 --decode)

** Running Drush commands

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},tier=drupal" -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -- drush $YOUR_COMMAND

** Istio

Running with Istio sidecar injection?

1. The jobs won't finish, so you'll need to monitor the pods and once they reach 1/2 ready, terminate the proxy:

  kubectl exec -it $POD_NAME -n {{ .Release.Namespace }} -c istio-proxy -- kill -INT 1

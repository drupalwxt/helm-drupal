# Default values for Site Example CSI Azure.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

ingress:
  enabled: true
  path: /
  hosts:
    - site.example.ca
  annotations:
    kubernetes.io/ingress.class: istio

## Drupal
## Ref: https://github.com/drupalwxt/helm-drupal
drupal:
  ## Drupal image version
  ## ref: https://hub.docker.com/drupalwxt/site-wxt/tags/
  ##
  image: example.azurecr.io/site-example
  tag: 1.0.0
  version: d9

  imagePullSecrets:
    - name: acr-registry

  ## Site configuration
  ##
  profile: wxt
  siteEmail: admin@example.com
  siteName: Drupal Install Profile (WxT)

  ## Application password
  ##
  password: XXXXX

  # php-fpm healthcheck
  # Requires https://github.com/renatomefi/php-fpm-healthcheck in the container.
  # (note: official images do not contain this feature yet)
  healthcheck:
    enabled: true

  # Switch to canada.ca theme (only used if install and/or reconfigure are enabled)
  # Common options include: theme-wet-boew, theme-gcweb-legacy
  wxtTheme: theme-gcweb

  # Install Drupal automatically
  install: false

  # Run migrations for default content
  migrate: false

  # PHP configuration
  php:
    ini:
      mysqlnd_azure.enableRedirect: off

  # Reconfigure on upgrade
  reconfigure: true
  cacheRebuildBeforeDatabaseMigration: true

  # Run extra install scripts
  # extraInstallScripts: |-
  #

  ## Extra settings.php settings
  ##
  extraSettings: |-
    $databases['default']['default']['pdo'][PDO::MYSQL_ATTR_SSL_CA] = '/etc/ssl/certs/ca-certificates.crt';
    $_SERVER['HTTPS'] = $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https' ? 'on' : 'off';
    $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];
    $settings['file_temp_path'] = '/drupal-tmp';
    $config['config_split.config_split.dev']['status'] = TRUE;

  extraUpgradeScripts: |-
    drush config:import --yes

  # Restore Drupal automatically
  restore:
    enabled: false

  # Configure the Drupal cron
  cron:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to once an hour
    schedule: '*/2 * * * *'

  # Configure additional Drupal crons
  additionalCrons:
    clean-backups:
      # Run at 03:00AM UTC every day.
      schedule: '00 03 * * *'
      script: |
        find /backup/ -mindepth 1 -maxdepth 1 -type d -mtime +30 -exec echo "rm -rf " {} \; 2>&1;
        find /backup/ -mindepth 1 -maxdepth 1 -type d -mtime +30 -exec rm -rf {} \; 2>&1;

      volumes:
      - name: backup
        persistentVolumeClaim:
          claimName: example-drupal-backup

      volumeMounts:
      - name: backup
        mountPath: /backup

  # Configure the Drupal backup cron
  backup:
    # When enabled, a CronJob will run the job based on the schedule
    enabled: true

    # CronJob schedule (standard cron syntax)
    # Defaults to midnight
    schedule: '0 0 * * *'

    volume:
      persistentVolumeClaim:
        claimName: example-drupal-backup

  # Allows custom /var/www/html/sites/default/files and /var/www/private mounts
  disableDefaultFilesMount: true

  volumes:
    - name: files-tmp
      persistentVolumeClaim:
        claimName: example-drupal-tmp

  volumeMounts:
    - name: files-public
      mountPath: /var/www/html/sites/default/files
    - name: files-private
      mountPath: /private
    - name: files-tmp
      mountPath: /drupal-tmp

  configSync:
    directory: "/var/www/config/sync"

## Nginx
## Ref: https://github.com/drupalwxt/helm-drupal
nginx:
  image: example.azurecr.io/site-example-nginx
  tag: 1.0.0

  imagePullSecrets:
    - name: acr-registry

  # Set your cluster's DNS resolution service here
  resolver: 10.0.0.10

  volumeMounts:
    - name: files-public
      mountPath: /var/www/html/sites/default/files

azure:
  storageClass:
    create: true

  ## Azure Files
  # kubectl create secret generic example-storage --from-literal=azurestorageaccountname=$STORAGE_ACCOUNT_NAME --from-literal=azurestorageaccountkey=$STORAGE_KEY -n catsa
  azureFile:
    enabled: true
    # storageClass: "-"

    size: 100Gi

    protocol: nfs

    public:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-public-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: public
            protocol: nfs

    private:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-private-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: public
            protocol: nfs

    backup:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-backup-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: backup
            protocol: nfs
    tmp:
      spec:
        csi:
          driver: file.csi.azure.com
          volumeHandle: "example-drupal-tmp-nfs"
          volumeAttributes:
            resourceGroup: "dev-cc-drupal"
            storageAccount: "devccdrupal"
            shareName: tmp
            protocol: nfs

## Redis
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/redis
redis:
  enabled: true
  global:
    redis:
      password: XXXXX
  image:
    pullSecrets:
      - acr-registry
  replica:
    enabled: false
    replicaCount: 0
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
  sentinel:
    enabled: false
  master:
    service:
      type: ClusterIP
    disableCommands: []
    persistence:
      enabled: false
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
  commonConfiguration: |-
    # Disable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no
    # Disable RDB persistence.
    save ""
    # Redis Memory
    maxmemory "8024mb"
    maxmemory-policy "volatile-lfu"

## Varnish
## Ref: https://github.com/StatCan/charts/tree/master/stable/varnish
varnish:
  enabled: true
  varnishd:
    image: docker.io/varnish
    imagePullSecrets:
      - name: acr-registry
  memorySize: 1G

## External DB
## Ref: https://github.com/drupalwxt/helm-drupal
external:
  enabled: true
  driver: mysql
  port: 3306
  host: XXXXX.mysql.database.azure.com
  database: "example"
  user: examplemysqladmin
  password: XXXXX

## MySQL
## Ref: https://github.com/bitnami/charts/tree/master/bitnami/mysql
mysql:
  enabled: false

## ProxySQL
## Ref: https://github.com/drupalwxt/helm-drupal
proxysql:
  enabled: false
